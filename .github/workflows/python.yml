# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package (Meson Build)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest # Ejecuta el trabajo en un entorno Ubuntu

    strategy:
      matrix:
        # Define las versiones de Python en las que se probará el proyecto.
        # He expandido la lista para cubrir versiones más modernas,
        # ajusta según las versiones que tu proyecto realmente soporte.
        python-version: [3.8, 3.10, 3.12, 3.13]

    services:
      # Configuración del servicio RabbitMQ, si tus tests de AiiDA lo requieren.
      rabbitmq:
        image: rabbitmq:latest
        ports:
          - 5672:5672

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # Usa la versión más reciente de la acción de checkout.

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5 # Usa la versión más reciente de la acción de setup-python.
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies for Fortran/C extensions
      run: |
        # Actualiza la lista de paquetes e instala las dependencias del sistema.
        # 'git': por si necesitas clonar algo internamente (aunque ya se hace checkout).
        # 'gfortran': compilador Fortran.
        # 'libblas-dev', 'liblapack-dev': librerías de desarrollo para BLAS y LAPACK.
        # 'libgomp1': librería de OpenMP, necesaria para la paralelización en Fortran.
        sudo apt-get update
        sudo apt-get install -y git gfortran libblas-dev liblapack-dev libgomp1

    - name: Install Python build system dependencies
      run: |
        # Actualiza pip a la última versión.
        python -m pip install --upgrade pip
        # Instala las herramientas necesarias para que Meson-Python construya el proyecto.
        # 'meson': el sistema de construcción.
        # 'ninja': el backend de compilación rápido que Meson utiliza.
        # 'meson-python': el backend de construcción PEP 517 para proyectos Python con Meson.
        # 'build': una herramienta estándar de PyPA para construir paquetes Python.
        pip install meson ninja meson-python build

    - name: Build project with Meson
      run: |
        # Este comando utiliza 'build' para crear la distribución de fuente (sdist)
        # y la distribución binaria (wheel) de tu paquete.
        # 'build' detectará automáticamente 'pyproject.toml' y usará 'meson-python'.
        python -m build --sdist --wheel .

    - name: Install project and test dependencies
      run: |
        # Instala el wheel compilado. Esto asegura que los tests se ejecuten
        # contra la versión instalada del paquete, tal como lo haría un usuario.
        pip install dist/*.whl
        # Instala las dependencias específicas para linting y testing.
        pip install flake8 pytest~=6.0 pgtest~=1.3 aiida-core~=2.3 aiida-quantumespresso~=4.3
        # Ejecuta la instalación de pseudopotenciales de AiiDA, si es necesaria para los tests.
        aiida-pseudo install
        # Instala los requisitos de Julia, si tu suite de tests los necesita.
        python -c 'import julia; julia.install()'

    - name: Lint with flake8
      run: |
        # Detiene la construcción si hay errores de sintaxis de Python o nombres indefinidos.
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Trata todos los errores como advertencias. El editor de GitHub tiene 127 caracteres de ancho.
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      env:
        # Establece el número de hilos de OpenMP para asegurar un comportamiento consistente en los tests.
        OMP_NUM_THREADS: 1
      run: |
        # Navega al directorio de tests.
        cd tests
        # Elimina cualquier caché de Python antigua para asegurar una ejecución limpia.
        rm -rf __pycache__
        # Ejecuta pytest, excluyendo los tests marcados como "release" (que suelen ser de larga duración).
        pytest -v -m "not release"
